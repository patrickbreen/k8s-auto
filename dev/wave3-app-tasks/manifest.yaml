---
# Source: wave3-app-tasks/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tasks
  namespace: tasks
---
# Source: wave3-app-tasks/templates/postgres.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "2022-06-28T18:35:06Z"
  labels:
    application: spilo
    cluster-name: tasks-postgres
    spilo-role: master
    team: tasks
  name: tasks-postgres-master
  namespace: tasks
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: postgresql
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    application: spilo
    cluster-name: tasks-postgres
    spilo-role: master
  sessionAffinity: None
  type: ClusterIP
---
# Source: wave3-app-tasks/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: tasks
  namespace: tasks
  labels:
    name: tasks
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: metrics
  selector:
    name: tasks
---
# Source: wave3-app-tasks/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: tasks-canary
  namespace: tasks
  labels:
    name: tasks-canary
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: metrics
  selector:
    name: tasks-canary
---
# Source: wave3-app-tasks/templates/canary.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tasks-canary
  namespace: tasks
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: tasks-canary
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9000"
        prometheus.io/scrape: "true"
      labels:
        name: tasks-canary
    spec:
      containers:
      - env:
        - name: ENV_NAME
          value: "dev"
        image: "ghcr.io/patrickbreen/k8s-tasks-canary@sha256:087039169e799684efbabd6c63856ba494fffe489450147fe5605b489669d404"
        ports:
        - containerPort: 900
          name: http
          protocol: TCP
        name: tasks-canary
      serviceAccount: tasks
      serviceAccountName: tasks
---
# Source: wave3-app-tasks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: tasks
  name: tasks
  namespace: tasks
spec:
  replicas: !!int "2"
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: tasks
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9000"
        prometheus.io/scrape: "true"
      labels:
        name: tasks
    spec:
      containers:
      - env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: app-user.tasks-postgres.credentials.postgresql.acid.zalan.do
        image: "ghcr.io/patrickbreen/k8s-tasks-app@sha256:5b832246a90f56f52c930d4c2381f66e57abf23e4e9ad6b936d8a493d06d66fe"
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9000
          name: metrics
          protocol: TCP
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/v1/tasks/
            port: http
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: tasks
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/v1/tasks/
            port: http
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
      serviceAccount: tasks
      serviceAccountName: tasks
---
# Source: wave3-app-tasks/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tasks
  namespace: tasks
  annotations:
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-production"
spec:
  tls:
  - hosts:
    - tasks.dev.leetcyber.com
    secretName: tasks-external-cert
  ingressClassName: external-nginx
  rules:
  - host: tasks.dev.leetcyber.com
    http:
      paths:
      - backend:
          service:
            name: tasks
            port:
              number: 80
        path: /
        pathType: Prefix
status:
  loadBalancer: {}
---
# Source: wave3-app-tasks/templates/servicemonitors.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app.kubernetes.io/component: grafana
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: kube-prometheus
    app.kubernetes.io/version: 9.0.1
  name: tasks
  namespace: monitoring
spec:
  endpoints:
  - interval: 30s
    path: /metrics
    port: metrics
  namespaceSelector:
    matchNames:
    - tasks
  selector:
    matchLabels:
      name: tasks
---
# Source: wave3-app-tasks/templates/servicemonitors.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app.kubernetes.io/component: grafana
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: kube-prometheus
    app.kubernetes.io/version: 9.0.1
  name: tasks-canary
  namespace: monitoring
spec:
  endpoints:
  - interval: 30s
    path: /metrics
    port: metrics
  namespaceSelector:
    matchNames:
    - tasks
  selector:
    matchLabels:
      name: tasks-canary
---
# Source: wave3-app-tasks/templates/postgres.yaml
apiVersion: "acid.zalan.do/v1"
kind: postgresql
metadata:
  name: tasks-postgres
  namespace: tasks
spec:
  teamId: "tasks"
  volume:
    size: 6Gi
    storageClass: longhorn
  numberOfInstances: 2
  patroni:
    pg_hba:
      - local all,replication all md5
      - hostssl all,replication all 0.0.0.0/0 md5
      - host    all,replication all 0.0.0.0/0 md5
      - host    all,replication all ::1/128   md5
  users:
    # database owner
    owner:
    - superuser
    - createdb
    # role for application
    app-user: []

  #databases: name->owner
  preparedDatabases:
    tasks: {}
  databases:
    app: owner
  postgresql:
    version: "14"
